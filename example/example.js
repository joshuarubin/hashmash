// Generated by CoffeeScript 1.6.3
(function() {
  var HashCash, MAX_TESTS, STATUS_RUNNING, STATUS_STOPPED, STATUS_STOPPING, hc, load, newNumBits, numBits, reset, resource, results, setNumBits, setStatus, status, test, updateData, updateResults;

  MAX_TESTS = 100;

  resource = "zvelo.com";

  HashCash = hashcash.HashCash;

  hc = void 0;

  numBits = void 0;

  newNumBits = 19;

  STATUS_STOPPED = 0;

  STATUS_RUNNING = 1;

  STATUS_STOPPING = 2;

  status = STATUS_STOPPED;

  results = {};

  window.toggle = function() {
    switch (status) {
      case STATUS_STOPPED:
        setNumBits();
        setStatus(STATUS_RUNNING);
        return test();
      case STATUS_RUNNING:
        return setStatus(STATUS_STOPPING);
      default:
        return console.error("toggle from unknown state", status);
    }
  };

  window.changeNumBits = function(elem) {
    return newNumBits = $(elem).val();
  };

  updateData = function(start, hashcash) {
    var duration, valid;
    valid = hc.validate(hashcash);
    duration = (new Date() - start) / 1000;
    if ((results.min == null) || duration < results.min) {
      results.min = duration;
    }
    if ((results.max == null) || duration > results.max) {
      results.max = duration;
    }
    results.duration += duration;
    results.num += 1;
    updateResults();
    console.log("test", results.num, hashcash, HashCash.hash(hashcash), "valid", valid, "duration", duration);
    if (status === STATUS_STOPPING) {
      setStatus(STATUS_STOPPED);
      return;
    }
    setNumBits();
    if (results.num < MAX_TESTS) {
      return test();
    } else {
      return setStatus(STATUS_STOPPED);
    }
  };

  setStatus = function(value) {
    status = value;
    switch (status) {
      case STATUS_STOPPED:
        $("#toggle").removeAttr("disabled").text("Start");
        return $("#status").text("stopped");
      case STATUS_RUNNING:
        $("#toggle").removeAttr("disabled").text("Stop");
        return $("#status").text("running");
      case STATUS_STOPPING:
        $("#toggle").attr("disabled", "disabled").text("Stopping");
        return $("#status").text("stopping");
    }
  };

  test = function() {
    var start;
    if (!resource.length) {
      return;
    }
    start = new Date();
    hc = new HashCash(numBits, "../browser/hashcash_worker.min.js");
    return hc.generate(resource, function(hashcash) {
      return updateData(start, hashcash);
    });
  };

  setNumBits = function() {
    if (!(status === STATUS_STOPPED || (newNumBits != null))) {
      return;
    }
    if (newNumBits != null) {
      numBits = newNumBits;
      newNumBits = void 0;
    }
    return reset();
  };

  reset = function() {
    hc = new HashCash(numBits);
    results = {
      num: 0,
      duration: 0,
      min: void 0,
      max: void 0
    };
    return updateResults();
  };

  updateResults = function() {
    var averageDuration;
    averageDuration = 0;
    if (results.num) {
      averageDuration = results.duration / results.num;
    }
    $("#test-number").text(results.num);
    $("#average-duration").text(averageDuration);
    $("#minimum-duration").text(results.min);
    return $("#maximum-duration").text(results.max);
  };

  load = function() {
    setNumBits();
    return $("#num-bits").val(numBits);
  };

  load();

}).call(this);
